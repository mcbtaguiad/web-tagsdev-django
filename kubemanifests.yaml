apiVersion: v1
items:
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.prod.yml -o kubemanifests.yaml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: nginx
      name: nginx
    spec:
      clusterIP: 10.43.100.102
      type: LoadBalancer
      ports:
        - name: "1337"
          port: 1337
          targetPort: 80
      selector:
        io.kompose.service: nginx
    status:
      loadBalancer: {}
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.prod.yml -o kubemanifests.yaml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: web
      name: web
    spec:
      clusterIP: 10.43.100.101
      ports:
        - name: "8000"
          port: 8000
          targetPort: 8000
      selector:
        io.kompose.service: web
    status:
      loadBalancer: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.prod.yml -o kubemanifests.yaml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: db
      name: db
    spec:
      replicas: 2
      selector:
        matchLabels:
          io.kompose.service: db
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.prod.yml -o kubemanifests.yaml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: db
        spec:
          containers:
            - env:
                - name: POSTGRES_DB
                  valueFrom:
                    configMapKeyRef:
                      key: POSTGRES_DB
                      name: env-prod-db
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    configMapKeyRef:
                      key: POSTGRES_PASSWORD
                      name: env-prod-db
                - name: POSTGRES_USER
                  valueFrom:
                    configMapKeyRef:
                      key: POSTGRES_USER
                      name: env-prod-db
              image: postgres:13.0-alpine
              name: db
              resources: {}
              volumeMounts:
                - mountPath: /var/lib/postgresql/data/
                  name: postgres-data
          restartPolicy: Always
          #nodeSelector:
          #  arch: armhf
          volumes:
            - name: postgres-data
              persistentVolumeClaim:
                claimName: postgres-data
    status: {}
  - apiVersion: v1
    data:
      POSTGRES_DB: django
      POSTGRES_PASSWORD: Therealdeal1
      POSTGRES_USER: mcbtaguiad
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: db-env-prod-db
      name: env-prod-db
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: postgres-data
      name: postgres-data
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.prod.yml -o kubemanifests.yaml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: nginx
      name: nginx
    spec:
      replicas: 3
      selector:
        matchLabels:
          io.kompose.service: nginx
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.prod.yml -o kubemanifests.yaml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: nginx
        spec:
          containers:
            - image: mcbtaguiad/tagsdev-web:nginx-test2
              name: nginx
              ports:
                - containerPort: 80
              resources: {}
              volumeMounts:
                - mountPath: /home/app/web/staticfiles
                  name: static-volume
          restartPolicy: Always
          #nodeSelector:
          #  arch: arm64
          volumes:
            - name: static-volume
              persistentVolumeClaim:
                claimName: static-volume

            
    status: {}
  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: static-volume
      name: static-volume
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 100Mi
    status: {}
  - apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        kompose.cmd: kompose convert -f docker-compose.prod.yml -o kubemanifests.yaml
        kompose.version: 1.22.0 (955b78124)
      creationTimestamp: null
      labels:
        io.kompose.service: web
      name: web
    spec:
      replicas: 3
      selector:
        matchLabels:
          io.kompose.service: web
      strategy:
        type: Recreate
      template:
        metadata:
          annotations:
            kompose.cmd: kompose convert -f docker-compose.prod.yml -o kubemanifests.yaml
            kompose.version: 1.22.0 (955b78124)
          creationTimestamp: null
          labels:
            io.kompose.service: web
        spec:
          containers:
            - args:
                - gunicorn
                - mysite.wsgi:application
                - --bind
                - 0.0.0.0:8000
              env:
                - name: DATABASE
                  valueFrom:
                    configMapKeyRef:
                      key: DATABASE
                      name: env-prod
                - name: DEBUG
                  valueFrom:
                    configMapKeyRef:
                      key: DEBUG
                      name: env-prod
                - name: DJANGO_ALLOWED_HOSTS
                  valueFrom:
                    configMapKeyRef:
                      key: DJANGO_ALLOWED_HOSTS
                      name: env-prod
                - name: SECRET_KEY
                  valueFrom:
                    configMapKeyRef:
                      key: SECRET_KEY
                      name: env-prod
                - name: SQL_DATABASE
                  valueFrom:
                    configMapKeyRef:
                      key: SQL_DATABASE
                      name: env-prod
                - name: SQL_ENGINE
                  valueFrom:
                    configMapKeyRef:
                      key: SQL_ENGINE
                      name: env-prod
                - name: SQL_HOST
                  valueFrom:
                    configMapKeyRef:
                      key: SQL_HOST
                      name: env-prod
                - name: SQL_PASSWORD
                  valueFrom:
                    configMapKeyRef:
                      key: SQL_PASSWORD
                      name: env-prod
                - name: SQL_PORT
                  valueFrom:
                    configMapKeyRef:
                      key: SQL_PORT
                      name: env-prod
                - name: SQL_USER
                  valueFrom:
                    configMapKeyRef:
                      key: SQL_USER
                      name: env-prod
              image: mcbtaguiad/tagsdev-web:web-test1
              name: web
              ports:
                - containerPort: 8000
              resources: {}
              volumeMounts:
                - mountPath: /home/app/web/staticfiles
                  name: static-volume
          restartPolicy: Always
          #nodeSelector:
          #archtype: armhf
          volumes:
            - name: static-volume
              persistentVolumeClaim:
                claimName: static-volume
    status: {}
  - apiVersion: v1
    data:
      DATABASE: postgres
      DEBUG: "0"
      DJANGO_ALLOWED_HOSTS: localhost 127.0.0.1 [::1] tagsdev.loca.lt 107.172.78.203 mark.tagsdev.click
      SECRET_KEY: Therealdeal1
      SQL_DATABASE: django
      SQL_ENGINE: django.db.backends.postgresql
      SQL_HOST: 10.43.100.103
      SQL_PASSWORD: Therealdeal1
      SQL_PORT: "5432"
      SQL_USER: mcbtaguiad
    kind: ConfigMap
    metadata:
      creationTimestamp: null
      labels:
        io.kompose.service: web-env-prod
      name: env-prod
kind: List
metadata: {}


---

apiVersion: v1
kind: Service
metadata:
  name: db
  labels:
    app: db
spec:
  clusterIP: 10.43.100.103 #Specify the ClusterIP 
  type: NodePort
  ports:
  - port: 5432
  
  selector:
    io.kompose.service: db


